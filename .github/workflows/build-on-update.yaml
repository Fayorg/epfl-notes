name: Build changed LaTeX classes
on:
  push:
    paths:
      - 'classes/**'

jobs:
  detect-changed-folders:
    runs-on: ubuntu-latest
    outputs:
      folders: ${{ steps.set_folders.outputs.folders }}
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List changed files
        id: list_changes
        run: |
          echo "Listing changed files between ${{ github.event.before }} and ${{ github.sha }}"
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt || true
          echo "=== changed_files.txt ==="
          cat changed_files.txt || true

      - name: Derive unique class folders and set output
        id: set_folders
        run: |
          # extract `classes/<folder>` from changed file paths
          folders=$(awk -F/ '/^classes\//{print $1"/"$2}' changed_files.txt | sort -u)

          if [ -z "$folders" ]; then
            # no matching folders -> empty JSON array
            echo "No changed classes detected."
            echo "folders=[]" >> $GITHUB_OUTPUT
          else
            # build JSON array from lines (using python3), strip "classes/"
            json=$(printf '%s\n' "$folders" | python3 -c 'import sys,json; print(json.dumps([l.strip().split("/",1)[1] for l in sys.stdin if l.strip()]))')
            echo "Detected folders: $json"
            echo "folders=$json" >> $GITHUB_OUTPUT
          fi

  build:
    needs: detect-changed-folders
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/moderncv/debian-texlive-docker:main
    if: ${{ needs.detect-changed-folders.outputs.folders != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        folder: ${{ fromJson(needs.detect-changed-folders.outputs.folders) }}
    steps:
      - name: Checkout (to get sources)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Adding hash as a variable
        run: |
          calculatedSha=${{ github.sha }}::7
          awk '{if($0 ~ /\\input{..\/..\/template\/header\.tex}/){print "\\def\\githubhash{${{ github.sha }}}"} print}' classes/${{ matrix.folder }}/main.tex > temp.tex && mv temp.tex classes/${{ matrix.folder }}/main.tex

      - name: Change theme to bright in main.tex
        run: |
          awk '{if($0 ~ /\\input{..\/..\/template\/header\.tex}/){print "\\def\\theme{bright}"} print}' classes/${{ matrix.folder }}/main.tex > temp.tex && mv temp.tex classes/${{ matrix.folder }}/main.tex

      - name: Build LaTeX for folder ${{ matrix.folder }}
        working-directory: classes/${{ matrix.folder }}
        run: |
          echo "Building ${PWD}/main.tex"
          mkdir -p build
          # latexmk will run pdflatex (or xelatex if your main.tex needs it)
          # Use -silent for less log noise, remove if you want full logs
          latexmk -pdf -outdir=build main.tex
          echo "Renaming output PDF"
          mv build/main.pdf build/${{ matrix.folder }}.pdf
          echo "Build output files:"
          ls -l build || true

      - name: Change theme to dark in main.tex
        run: |
          awk '{if($0 ~ /\\input{..\/..\/template\/header\.tex}/){print "\\def\\theme{dark}"} print}' classes/${{ matrix.folder }}/main.tex > temp.tex && mv temp.tex classes/${{ matrix.folder }}/main.tex

      - name: Build LaTeX for folder ${{ matrix.folder }}
        working-directory: classes/${{ matrix.folder }}
        run: |
          echo "Building ${PWD}/main.tex"
          mkdir -p build
          # latexmk will run pdflatex (or xelatex if your main.tex needs it)
          # Use -silent for less log noise, remove if you want full logs
          latexmk -pdf -outdir=build main.tex
          echo "Renaming output PDF"
          mv build/main.pdf build/${{ matrix.folder }}-dark.pdf
          echo "Build output files:"
          ls -l build || true

      - name: Install AWS CLI
        run: |
          apt-get update
          apt-get install -y awscli

      - name: Upload Bright PDF to DigitalOcean Space
        run: |
          aws s3 cp \
            classes/${{ matrix.folder }}/build/${{ matrix.folder }}.pdf \
            s3://${{ secrets.S3_BUCKET }}/notes/${{ matrix.folder }}.pdf \
            --endpoint-url ${{ secrets.S3_ENDPOINT }} \
            --acl public-read
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}

      - name: Upload Dark PDF to DigitalOcean Space
        run: |
          aws s3 cp \
            classes/${{ matrix.folder }}/build/${{ matrix.folder }}-dark.pdf \
            s3://${{ secrets.S3_BUCKET }}/notes/${{ matrix.folder }}-dark.pdf \
            --endpoint-url ${{ secrets.S3_ENDPOINT }} \
            --acl public-read
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_KEY }}
